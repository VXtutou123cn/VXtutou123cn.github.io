"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[914],{249:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>G,data:()=>I});var e=a(641);const t=(0,e.Lk)("h2",{id:"数据类型分类",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#数据类型分类"},[(0,e.Lk)("span",null,"数据类型分类")])],-1),l=(0,e.Lk)("h3",{id:"基本数据类型",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#基本数据类型"},[(0,e.Lk)("span",null,"基本数据类型")])],-1),c={id:"number",tabindex:"-1"},i={class:"header-anchor",href:"#number"},p=(0,e.Lk)("div",{class:"custom-container tip"},[(0,e.Lk)("p",{class:"custom-container-title"},"介绍"),(0,e.Lk)("p",null,"Javascript是弱数据类型，赋值后才能判断")],-1),o=(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,"整数"),(0,e.Lk)("li",null,"小数"),(0,e.Lk)("li",null,"负数")],-1),r={id:"string",tabindex:"-1"},u={class:"header-anchor",href:"#string"},d=(0,e.Fv)('<h5 id="字符串含义" tabindex="-1"><a class="header-anchor" href="#字符串含义"><span>字符串含义</span></a></h5><p>字符串使用英文状态下的<code>&quot;</code> <code>&quot;</code>或<code>&#39;</code> <code>&#39;</code> 单引号和双引号可以相互嵌套，但注意不能自己嵌套自己</p><h5 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;忍者&#39;</span><span class="token operator">+</span><span class="token string">&#39;神龟&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>\n<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>\n<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>comic <span class="token operator">+</span> author<span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> comic <span class="token operator">=</span> <span class="token string">&#39;火影忍者&#39;</span></span>\n<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token string">&#39;岸本齐史&#39;</span></span>\n<span class="line"></span>\n<span class="line">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>comic<span class="token punctuation">}</span>的作者是$<span class="token punctuation">{</span>author<span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),k={id:"boolean",tabindex:"-1"},h={class:"header-anchor",href:"#boolean"},L=(0,e.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> isDarkMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',1),m={id:"undefined",tabindex:"-1"},v={class:"header-anchor",href:"#undefined"},b=(0,e.Lk)("p",null,"只声明变量，未赋值",-1),g={id:"null",tabindex:"-1"},f={class:"header-anchor",href:"#null"},j=(0,e.Lk)("p",null,"声明并赋值，但为空",-1),x=(0,e.Lk)("h3",{id:"引用数据类型",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#引用数据类型"},[(0,e.Lk)("span",null,"引用数据类型")])],-1),y={id:"object",tabindex:"-1"},W={class:"header-anchor",href:"#object"},w={id:"function",tabindex:"-1"},F={class:"header-anchor",href:"#function"},_={id:"array",tabindex:"-1"},C={class:"header-anchor",href:"#array"},q=(0,e.Fv)('<h2 id="检测数据类型" tabindex="-1"><a class="header-anchor" href="#检测数据类型"><span>检测数据类型</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h2><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出number12</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>+</code>两边只要有一个字符串，都会把另外一个转成字符串 除了<code>+</code>以外的算术运算符，比如<code>-</code> <code>*</code> <code>/</code>等都会把数据转成数字类型</p><h3 id="显式转换" tabindex="-1"><a class="header-anchor" href="#显式转换"><span>显式转换</span></a></h3>',7),N=(0,e.Lk)("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[(0,e.Lk)("pre",{class:"language-javascript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"line"},[(0,e.eW)("console"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"log"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token function"},"Number"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},"'10'"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"}),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"},[(0,e.Lk)("span",{class:"token comment"},"//保留整数")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"},[(0,e.eW)("console"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"log"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token function"},"parseInt"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},"'12.88'"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"}),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"},[(0,e.Lk)("span",{class:"token comment"},"// 保留小数")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"},[(0,e.eW)("console"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"log"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token function"},"parseFloat"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token string"},"'12.88'"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"})])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),T=(0,e.Lk)("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[(0,e.Lk)("pre",{class:"language-javascript"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"line"},[(0,e.eW)("console"),(0,e.Lk)("span",{class:"token punctuation"},"."),(0,e.Lk)("span",{class:"token function"},"log"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token function"},"String"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token number"},"10"),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.Lk)("span",{class:"token punctuation"},")")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"line"})])])],-1),B={},G=(0,a(262).A)(B,[["render",function(n,s){const a=(0,e.g2)("Badge"),B=(0,e.g2)("CodeGroupItem"),G=(0,e.g2)("CodeGroup");return(0,e.uX)(),(0,e.CE)("div",null,[t,l,(0,e.Lk)("h4",c,[(0,e.Lk)("a",i,[(0,e.Lk)("span",null,[(0,e.eW)("number "),(0,e.bF)(a,{text:"数字型",type:"tip"})])])]),p,o,(0,e.Lk)("h4",r,[(0,e.Lk)("a",u,[(0,e.Lk)("span",null,[(0,e.eW)("string "),(0,e.bF)(a,{text:"字符串型",type:"tip"})])])]),d,(0,e.Lk)("h4",k,[(0,e.Lk)("a",h,[(0,e.Lk)("span",null,[(0,e.eW)("Boolean "),(0,e.bF)(a,{text:"布尔型",type:"warning"})])])]),L,(0,e.Lk)("h4",m,[(0,e.Lk)("a",v,[(0,e.Lk)("span",null,[(0,e.eW)("undefined "),(0,e.bF)(a,{text:"未定义型",type:"danger"})])])]),b,(0,e.Lk)("h4",g,[(0,e.Lk)("a",f,[(0,e.Lk)("span",null,[(0,e.eW)("null "),(0,e.bF)(a,{text:"空",type:"warning"})])])]),j,x,(0,e.Lk)("h4",y,[(0,e.Lk)("a",W,[(0,e.Lk)("span",null,[(0,e.eW)("object "),(0,e.bF)(a,{text:"对象",type:"tip"})])])]),(0,e.Lk)("h4",w,[(0,e.Lk)("a",F,[(0,e.Lk)("span",null,[(0,e.eW)("function "),(0,e.bF)(a,{text:"函数",type:"danger"})])])]),(0,e.Lk)("h4",_,[(0,e.Lk)("a",C,[(0,e.Lk)("span",null,[(0,e.eW)("array "),(0,e.bF)(a,{text:"数组",color:"warning"})])])]),q,(0,e.bF)(G,null,{default:(0,e.k6)((()=>[(0,e.bF)(B,{title:"数字型"},{default:(0,e.k6)((()=>[N])),_:1}),(0,e.bF)(B,{title:"字符型"},{default:(0,e.k6)((()=>[T])),_:1})])),_:1})])}]]),I=JSON.parse('{"path":"/js/dataType.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型"},"headers":[{"level":2,"title":"数据类型分类","slug":"数据类型分类","link":"#数据类型分类","children":[{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":3,"title":"引用数据类型","slug":"引用数据类型","link":"#引用数据类型","children":[]}]},{"level":2,"title":"检测数据类型","slug":"检测数据类型","link":"#检测数据类型","children":[]},{"level":2,"title":"数据类型转换","slug":"数据类型转换","link":"#数据类型转换","children":[{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"显式转换","slug":"显式转换","link":"#显式转换","children":[]}]}],"git":{"updatedTime":1720039834000,"contributors":[{"name":"swp","email":"3297943361@qq.com","commits":1}]},"filePathRelative":"js/dataType.md"}')}}]);